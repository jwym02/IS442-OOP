openapi: 3.1.0
info:
  title: Clinic Queue & Appointment System API
  version: 0.4.0
  description: |
    OpenAPI spec aligned with current backend endpoints implemented in the project.
    Notes:
    - All appointment times must align to clinic/doctor slot-interval minutes and fall within clinic operating hours.
servers:
  - url: http://localhost:8082
security:
  - bearerAuth: []
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Appointment:
      type: object
      properties:
        id: { type: integer, format: int64 }
        patientId: { type: integer, format: int64 }
        doctorId: { type: integer, format: int64 }
        clinicId: { type: integer, format: int64 }
        dateTime: { type: string, format: date-time }
        status: { $ref: "#/components/schemas/AppointmentStatus" }
      required: [id, patientId, doctorId, clinicId, dateTime, status]
    AppointmentCreateRequest:
      type: object
      properties:
        patientId: { type: integer, format: int64 }
        doctorId: { type: integer, format: int64 }
        clinicId: { type: integer, format: int64 }
        dateTime: { type: string, format: date-time }
      required: [patientId, doctorId, clinicId, dateTime]
      additionalProperties: false
    AppointmentRescheduleRequest:
      type: object
      properties:
        newDateTime: { type: string, format: date-time }
      required: [newDateTime]
      additionalProperties: false
    AppointmentStatus:
      type: string
      enum: [CREATED, CONFIRMED, CANCELLED, COMPLETED, NO_SHOW, RESCHEDULED]
    QueueEntry:
      type: object
      properties:
        id: { type: integer, format: int64 }
        clinicId: { type: integer, format: int64 }
        queueDate: { type: string, format: date }
        queueNumber: { type: integer }
        appointmentId: { type: integer, format: int64, nullable: true }
        status: { $ref: "#/components/schemas/QueueStatus" }
        createdAt: { type: string, format: date-time }
      required: [id, clinicId, queueDate, queueNumber, status]
    QueueStatus:
      type: string
      enum: [WAITING, CALLED, IN_PROGRESS, COMPLETED, SKIPPED, FAST_TRACKED]
    Notification:
      type: object
      properties:
        id: { type: integer, format: int64 }
        message: { type: string }
        type: { $ref: "#/components/schemas/NotificationType" }
        sentAt: { type: string, format: date-time }
        userId: { type: integer, format: int64 }
      required: [id, message, type, sentAt, userId]
    NotificationType:
      type: string
      enum:
        [
          APPOINTMENT_CREATED,
          APPOINTMENT_CONFIRMED,
          APPOINTMENT_CANCELLED,
          QUEUE_CALLED,
          REMINDER,
        ]
    Error:
      type: object
      properties:
        error:
          type: object
          properties:
            code: { type: string }
            message: { type: string }
            details: { type: object }
paths:
  # ---------- Patients ----------
  /api/v1/patients/{patientId}/appointments:
    post:
      summary: Book an appointment
      parameters:
        - in: path
          name: patientId
          required: true
          schema: { type: integer, format: int64 }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/AppointmentCreateRequest" }
      responses:
        "200":
          description: Appointment booked
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Appointment" }
        "400": { description: Bad request }
        "404": { description: Not found }
        "409": { description: Conflict }
  /api/v1/patients/appointments/{appointmentId}:
    delete:
      summary: Cancel an appointment
      parameters:
        - in: path
          name: appointmentId
          required: true
          schema: { type: integer, format: int64 }
      responses:
        "204": { description: Cancelled }
        "400": { description: Bad request }
        "404": { description: Not found }
  /api/v1/patients/appointments/{appointmentId}/reschedule:
    patch:
      summary: Reschedule an appointment
      parameters:
        - in: path
          name: appointmentId
          required: true
          schema: { type: integer, format: int64 }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/AppointmentCreateRequest" }
      responses:
        "200":
          description: Rescheduled
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Appointment" }
        "400": { description: Bad request }
        "404": { description: Not found }
  /api/v1/patients/appointments/{appointmentId}/check-in:
    post:
      summary: Patient check-in, returns queue entry
      parameters:
        - in: path
          name: appointmentId
          required: true
          schema: { type: integer, format: int64 }
      responses:
        "200":
          {
            description: Checked in,
            content:
              {
                application/json:
                  { schema: { $ref: "#/components/schemas/QueueEntry" } },
              },
          }
        "404": { description: Appointment not found }
  /api/v1/patients/{patientId}/queue-status:
    get:
      summary: Get queue status for a patient
      parameters:
        - in: path
          name: patientId
          required: true
          schema: { type: integer, format: int64 }
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  clinicId: { type: integer, format: int64 }
                  patientId: { type: integer, format: int64 }
                  queueNumber: { type: integer, nullable: true }
                  status: { type: string }
                  currentNumber: { type: integer }
                  numbersAway: { type: integer, nullable: true }

  # ---------- Staff ----------
  /api/v1/staff/appointments/walk-in:
    post:
      summary: Create a walk-in appointment
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                patientId: { type: integer, format: int64 }
                doctorId: { type: integer, format: int64 }
                clinicId: { type: integer, format: int64 }
                dateTime: { type: string, format: date-time }
      responses:
        "200": { description: OK }
  /api/v1/staff/queue/start:
    post:
      summary: Start queue for a clinic
      parameters:
        - in: query
          name: clinicId
          required: true
          schema: { type: integer, format: int64 }
      responses:
        "204": { description: Started }
  /api/v1/staff/queue/pause:
    post:
      summary: Pause queue for a clinic
      parameters:
        - in: query
          name: clinicId
          required: true
          schema: { type: integer, format: int64 }
      responses:
        "204": { description: Paused }
  /api/v1/staff/queue/next:
    post:
      summary: Call next queue number for a clinic
      parameters:
        - in: query
          name: clinicId
          required: true
          schema: { type: integer, format: int64 }
      responses:
        "200": { description: OK }
        "404": { description: No patients in queue }
  /api/v1/staff/queue/{queueNumber}/status:
    patch:
      summary: Update queue entry status
      parameters:
        - in: path
          name: queueNumber
          required: true
          schema: { type: integer }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                clinicId: { type: integer, format: int64 }
                status: { type: string }
      responses:
        "200": { description: Updated }
        "404": { description: Not found }
  /api/v1/staff/queue/{queueNumber}/fast-track:
    post:
      summary: Fast-track a queue entry
      parameters:
        - in: path
          name: queueNumber
          required: true
          schema: { type: integer }
        - in: query
          name: clinicId
          required: true
          schema: { type: integer, format: int64 }
      responses:
        "200": { description: OK }
        "404": { description: Not found }
  /api/v1/staff/queue/status:
    get:
      summary: Get queue status snapshot for a clinic
      parameters:
        - in: query
          name: clinicId
          required: true
          schema: { type: integer, format: int64 }
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  clinicId: { type: integer, format: int64 }
                  currentNumber: { type: integer }
                  waitingCount: { type: integer }
                  state: { type: string, enum: [ACTIVE, PAUSED] }

  # ---------- Admin ----------
  /api/v1/admin/clinics/{clinicId}/hours:
    put:
      summary: Update clinic operating hours
      parameters:
        - in: path
          name: clinicId
          required: true
          schema: { type: integer, format: int64 }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                openTime: { type: string, example: "09:00" }
                closeTime: { type: string, example: "18:00" }
      responses:
        "200": { description: OK }
        "404": { description: Clinic not found }
  /api/v1/admin/clinics/{clinicId}/slot-interval:
    put:
      summary: Update clinic default slot interval
      parameters:
        - in: path
          name: clinicId
          required: true
          schema: { type: integer, format: int64 }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: integer
              example: 15
      responses:
        "200": { description: OK }
        "404": { description: Clinic not found }
  /api/v1/admin/doctors/{doctorId}/schedule:
    put:
      summary: Update a doctor's schedule settings
      parameters:
        - in: path
          name: doctorId
          required: true
          schema: { type: integer, format: int64 }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                slotIntervalMinutes: { type: integer, example: 10 }
      responses:
        "200": { description: OK }
        "404": { description: Doctor not found }
